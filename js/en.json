{
  "language-selector": "language",
  "about-tab": "About larvae",
  "about-text": "Larvae is a CSS/JavaScript framework for AngularJS inspired by Bootstrap. It is a side project of my other project <a href='https://github.com/oknalv/piollo' target='_blank'>piollo</a> and the purpose of doing it is learning about AngularJS directives and also expanding my JavaScript and CSS knowledge.",
  "about-name": "I've chosen larvae as project name because, when I started it, there were a lot of moth larvae in my pantry due to a flour moth plague (<a href='https://en.wikipedia.org/wiki/Indian_mealmoth' target='_blank'><i>Plodia interpunctella</i></a>) that we had had in summer.",
  "under-construction": "(Note: both larvae and this page are likely to change because they are under construction).",
  "components-tab": "Components",
  "buttons": "Buttons",
  "button-introduction": "Buttons have to be declared with the <code>.btn</code> class.",
  "modifiers": "Modifiers",
  "button-modifiers": "There are some classes that you can add to elements with <code>.btn</code> class to change their appearance.",
  "button-modifiers-round": "One of them is the <code>.round</code> class. It makes the button corners to be more rounded.",
  "button-modifiers-icon": "Another class is <code>.icon</code>. It is designed for buttons with only an icon inside. Its width is the same than its height, it's thicker than a normal button and it has no border.",
  "button-modifiers-both": "You can use <code>.icon</code> and <code>.round</code> classes together.",
  "button-colors": "If you want to change button colors, you must use the <code>data-lrv-color</code> attribute with the colors you want in CSS hexadecimal format. This attribute supports 2 colors separated by a space: the first one changes the border, shadows and font colors; the second one is optional and changes the background color.",
  "grouping": "Grouping",
  "button-grouping": "You can group buttons wrapping them in an element which has to have the <code>.grouped</code> class.",
  "installation": "Installation",
  "include-it": "You only have to include the CSS and JavaScript sources from the <code>/src</code> folder of the project.",
  "checkboxes": "Checkboxes",
  "checkboxes-introduction": "Checkboxes have to be declared with their <code>label</code> tag just after each one. There are three different classes:",
  "checkbox-left": "The first one is the <code>.checkbox-left</code> class. It hides the original checkbox and adds the <code>before</code> pseudo-element to the <code>label</code>, which displays a tiny box.",
  "checkbox-right": "Another class is <code>.checkbox-right</code>. It works like the previous one but displays the <code>after</code> peudo-element instead.",
  "checkbox-btn": "The last available class is <code>.checkbox-btn</code>. It doesn't use <code>label</code> tag's pseudo-elements, it changes its style to look like a button.",
  "checkbox-grouping": "You can group checkboxes wrapping them in an element which has to have the <code>.grouped</code> class. It only works with checkboxes which have the <code>.checkbox-btn</code> class.",
  "checkbox-colors": "If you want to change checkbox colors, you must use the <code>data-lrv-color</code> attribute with the colors you want in CSS hexadecimal format. For <code>checkbox-btn</code> directive, this attribute supports 2 colors separated by a space: the first one changes the border, shadows and font colors; the second one is optional and changes the background color. For <code>checkbox-right</code> and <code>checkbox-left</code> directives, this attribute supports only one color, that changes the box color.",
  "real-element": "Real element",
  "real-element-information": "As the real element is hidden, this is an example with it displayed.",
  "hidden-checkbox": "Hidden checkbox",
  "displayed-element": "Displayed element",
  "tabs": "Tabs",
  "tabs-introduction": "You can add tabs to show or hide different parts of your page. You have to add the <code>.tabs</code> directive to the tab container element and, in each element, the <code>data-lrv-tab</code> attribute referencing the id of the element which that tab is going to show (you can specify more than one id using spaces between them). Use the <code>.selected</code> class if you want a tab to be shown by default.",
  "tabs-modifiers": "If you want to use tabs vertically, you have to add the <code>.vertical</code> class to the tab container element.",
  "tabs-open-url": "Open a tab using the URL fragment",
  "tabs-open-introduction": "If you want a certain tab to be opened when loading a page, you must declare your <code>.tabs</code> element with the <code>data-lrv-link</code> attribute set to <code>true</code> and an id, and then you can use the fragment part of the url with the following syntax:",
  "tabs-open-fragment": "The pair key-value is the tab container id as key and the <code>data-lrv-tab</code> attribute value (only one tab id if multiple) from the tab as value. If you want more than one tab from different tab containers to be opened, just add another key-value pair separeted by an <code>&amp;</code>. For example, if you want this tab to be opened, you have to load the page with this fragment part in the URL:",
  "modals": "Modals",
  "modals-introduction": "There are three different AngularJS directives involved in the generation and use of modals. The main one is the <code>.modal</code> directive. The basic HTML tag structure is the following:",
  "modals-minimum-classes": "It must have an element with the <code>.modal-container</code> class, containing at least an element with the <code>.modal-body</code> class.",
  "modals-display": "If you want to launch it, you have to use the <code>.modal-launcher</code> directive and the <code>data-lrv-modal</code> attribute with the modal id. You can place them wherever you want and it will launch the modal when you click it. For example, you can place it in a button:",
  "modals-body": "Elements with <code>.modal-header</code> and <code>.modal-footer</code> classes are optional, so you can skip them.",
  "launch-example": "Launch example",
  "modals-close": "The last directive is <code>.modal-closer</code>. It uses the <code>data-lrv-modal</code> attribute with the modal id too. You can put an element with this class inside a modal to close it.",
  "selects": "Selects",
  "selects-introduction": "Selects have to be declared with <code>.select</code> directive. It hides the original select and generates an element that acts like a select. This directive is more complex than others. The select element must have a <code>data-lrv-model</code> attribute with the model name that will contain the select's value inside your app controller. It also has to be declared with the <code>data-lrv-options</code> attribute, with the model name of the select's options inside your app controller. Don't declare the options inside the select, just do it in the controller. The basic syntax is an array of strings, one for each option:",
  "selects-objects": "But that syntax is not very powerful. Instead of using an array of strings, you can use JSON objects whit the following syntax:",
  "selects-objects-explained": "The only required key is <code>value</code>, the other ones are optional. If you declare the <code>text</code> key, it will display a different option text than the <code>value</code> key. If you declare the <code>translation</code> key, it will ignore both <code>text</code> and <code>value</code> keys and will draw on the <code>translate</code> directive and change its text dynamically when language changes. Finally, the <code>selected</code> key, if its value is <code>true</code>, makes the select to take that option by default if the model of the <code>data-lrv-model</code> attribute is not set.",
  "selects-final-outcome": "So let's see an example of a select working with JSON objects and strings mixed (try changing the page language to change some options' language):",
  "option": "Option",
  "dynamic-change": "Dynamic change of options",
  "selects-dynamic-change": "Select options can be changed dynamically by changing the options' model and the constructed select element will be updated. Try clicking this button and see how the select changes.",
  "input-range": "Input type range",
  "range-introduction": "Inputs of type range must have the <code>.range</code> directive. This directive requires <code>min</code> and <code>max</code> HTML tag attributes and also the <code>data-lrv-model</code> attribute to work. It hides the real element and generates an element that acts like a input type range.",
  "multilang": "Multilanguage",
  "multilang-introduction": "You can bring multilanguage support to your page very easily. First you must declare a main parent element with the <code>.translate</code> directive and with the <code>data-lrv-texts</code>, <code>data-lrv-selected-lang</code> and <code>data-lrv-default-lang</code> attributes.",
  "multilang-texts": "The <code>data-lrv-texts</code> attribute must contain the name of the model name in the app controller that will contain a JSON object with all the translations inside JSON objects identified by a key representing a language, and those JSON objects with key-value pairs as text keys and translated texts:",
  "hello-world": "Hello world!!",
  "multilang-external": "You can also use external JSON files instead of putting the translations directly inside the app controller. The syntax is similar, but instead of a JSON object as value, you must provide the JSON file path in a string:",
  "multilang-selected": "The <code>data-lrv-selected-lang</code> attribute contains the model name in the app controller with the current language.",
  "multilang-default": "The <code>data-lrv-default-lang</code> attribute is optional, it tells the directive which is the controller's model that contains the key of a default language if there is no language specified. If it is not defined, the directive will pick the first language declared in the controller's model specified in the <code>data-lrv-texts</code> attribute. The default language is also used when a text key is missing in a language, picking the translation from the default language, so make sure that your default language has set all the text keys. In any case, if a key is missing even in the default language, the directive will use that key as text instead.",
  "texts-introduction": "After declaring the main parent element that will contain all the elements to translate, you must put, for each element that you want to give multilanguage support, the <code>.text</code> directive and a <code>data-lrv-text</code> attribute with the text key. (Note: if you create those elements dynamically, you must compile them to translate them the first time).",
  "multilang-change": "To change the language of the page, you only have to change the model declared in the <code>data-lrv-selected-lang</code> attribute. It's up to you how to do it. In this page, I did it using a select element, that one which is in the top right corner of the page. Try changing it.",
  "saving-lang": "Saving the selected language",
  "saving-lang-introduction": "This directive makes use of the local storage API, saving automatically the page's current language when it changes in a variable named <code>lang</code> in the <code>window.localStorage</code> object, so, if you close the browser tab or even the browser, when you load the page again, it is translated to the language you had selected before.",
  "github": "View on GitHub",
  "headings": "Headings",
  "headings-introduction": "Heading HTML tags don't need any class. They look like this:",
  "tables": "Tables",
  "tables-introduction": "Tables don't need any class, just follow the HTML tag tree structure for tables. They look like this:",
  "header-bar": "Header bar",
  "header-bar-introduction": "You can use the class <code>.header-bar</code> to make an element look like a header bar. It adds padding to the element and centers vertically its elements (in the example, the element has also background color for better understanding).",
  "helpers": "Helpers",
  "helpers-introduction": "There are some classes that you can use with certain elements to change their appearance.",
  "icon-introduction": "This class makes a font icon to be a little bit bigger than the rest of the text.",
  "hidden-introduction": "This class hides an element. It's used by some directives.",
  "text-style": "Text style",
  "text-style-introduction": "This section contains information about HTML text tag's default style and also classes which change texts' style.",
  "paragraph-introduction": "This class makes the text to be justified and adds some top and bottom margin to the text. This is a comparison between elements with and without <code>.paragraph</code> class (in this example, they have a background color and a parent element with border each one for better understanding):",
  "indent-introduction": "This class adds indentation to the first line of a text. This is a comparison between elements with and without <code>.indent</code> class (in this example, they have a border for better understanding):",
  "code-introduction": "This class changes the style of the element to make it monospace with some other style changes such as text color. The HTML <code>code</code> tag has the same style, but this class if for other tags to look like that. This is an example with <code>code</code> tag and <code>span</code> tag with <code>.code</code> class:",
  "radio-buttons": "Radio buttons",
  "radio-buttons-introduction": "Radio buttons have to be declared with their <code>label</code> tag just after each one. There are three different classes:",
  "radio-button-left": "The first one is the <code>.radio-left</code> class. It hides the original radio button and adds the <code>before</code> pseudo-element to the <code>label</code>, which displays a tiny circle.",
  "radio-button-right": "Another class is <code>.radio-right</code>. It works like the previous one but displays the <code>after</code> peudo-element instead.",
  "radio-button-btn": "The last available class is <code>.radio-btn</code>. It doesn't use <code>label</code> tag's pseudo-elements, it changes its style to look like a button.",
  "radio-button-grouping": "You can group radio buttons wrapping them in an element which has to have the <code>.grouped</code> class. It only works with radio buttons which have the <code>.radio-btn</code> class.",
  "radio-button-colors": "If you want to change radio button colors, you must use the <code>data-lrv-color</code> attribute with the colors you want in CSS hexadecimal format. For <code>radio-btn</code> directive, this attribute supports 2 colors separated by a space: the first one changes the border, shadows and font colors; the second one is optional and changes the background color. For <code>radio-right</code> and <code>radio-left</code> directives, this attribute supports only one color, that changes the box color.",
  "hidden-radio-button": "Hidden radio button",
  "grid": "Grid",
  "grid-introduction": "The grid system depends on the CSS flexbox layout. The main class is <code>.f-row</code>. It's a container class where you have to place the flex items. By default, the elements inside has their default width. Let's see an example:",
  "grid-elements": "But it doesn't look like a grid; you need to add the element classes. There are some of them, they start with the prefix <code>f-</code> and a fraction, but instead of using the <code>/</code> character for separating the numerator from the denominator, these classes use the <code>-</code> character. The fractions must be in their simplified form. Why have I designed it that way? Because it's funnier. So, <code>.f-1-4</code> is a valid class, but <code>.f-2-4</code> not. For now, the only available denominators are 1, 2, 4 and 8, and the numerators can't be bigger or equal to their denominators, except 1. This is an example of the grid system:",
  "alignment": "Alignment",
  "grid-alignment": "If you want to align the elements horizontally or vertically, there are some modifier classes that you can add to your container element. Those classes are:",
  "grid-h-end": "<code>.h-end</code> - It makes the elements to be horizontally aligned to the right. It uses the <code>justify-content: flex-end;</code> CSS rule.",
  "grid-h-center": "<code>.h-center</code> - It makes the elements to be horizontally aligned to the center. It uses the <code>justify-content: center;</code> CSS rule.",
  "grid-h-around": "<code>.h-around</code> - It makes the elements to be horizontally equally distributed. It uses the <code>justify-content: space-around;</code> CSS rule.",
  "grid-v-end": "<code>.v-end</code> - It makes the elements to be vertically aligned to the bottom. It uses the <code>align-items: flex-end;</code> CSS rule.",
  "grid-v-center": "<code>.v-center</code> - It makes the elements to be vertically aligned to the center. It uses the <code>align-items: center;</code> CSS rule.",
  "colors": "Colors",
  "colors-tab": "Colors",
  "colors-introduction": "The default color palette of this framework is probably not adapted to your page design. To fix this, you have the <code>colorFactory</code> factory. This factory has the <code>addColor</code> function, which its parameters are the class you want to change its colors, the modifier class name you are going to use and the color in a string or an array of strings if the class accepts more than one color. The color strings must be in the CSS hexadecimal format (for example <code>#123456</code>). Each class accepts a different number of colors:",
  "colors-btn": "This class supports 2 colors separated by a space. The first one changes the border, shadows and font colors; the second one is optional and changes the background color. These are some examples:"

}