{
  "language-selector": "language",
  "about-tab": "About larvae",
  "about-text": "Larvae is a CSS/JavaScript framework for AngularJS inspired by Bootstrap. I'm building it with the purpose of learning about AngularJS directives and also expanding my CSS knowledge.",
  "about-name": "I've chosen larvae as project name because, when I started it, there were a lot of moth larvae in my pantry due to a flour moth plague (Plodia interpunctella) that we had had in summer.",
  "under-construction": "(Note: both larvae and this page are under construction).",
  "components-tab": "Components",
  "only-css": "(Only CSS)",
  "buttons": "Buttons",
  "button-introduction": "Buttons have to be declared with the <code>btn</code> class.",
  "modifiers": "Modifiers",
  "button-modifiers": "There are some classes that you can add to elements with <code>btn</code> class to change their appearance.",
  "button-modifiers-round": "One of them is the <code>round</code> class. It makes the button corners to be more rounded.",
  "button-modifiers-icon": "Another class is <code>icon</code>. It is designed for buttons with only an icon inside. Its width is the same than its height, it's thicker than a normal button and it has no border.",
  "button-modifiers-both": "You can use <code>icon</code> and <code>round</code> classes together.",
  "button-modifiers-custom": "You can use your own modifier classes to change buttons' color.",
  "grouping": "Grouping",
  "button-grouping": "You can group buttons wrapping them in an element which has to have the <code>grouped</code> class.",
  "installation": "Installation",
  "include-it": "You only have to include the CSS and JavaScript sources from the <code>/src</code> folder of the project.",
  "checkboxes": "Checkboxes",
  "checkboxes-introduction": "Checkboxes have to be declared with their labels just after each one. There are three different classes:",
  "checkbox-left": "The first one is the <code>checkbox-left</code> class. It hides the original checkbox and adds a <code>before</code> pseudo-element to de label that displays a tiny box.",
  "checkbox-right": "Another class is <code>checkbox-right</code>. It works like the previous one but display an <code>after</code> peudo-element instead.",
  "checkbox-btn": "The last available class is <code>checkbox-btn</code>. It doesn't use pseudo-elements, it changes its label style to look like a button instead.",
  "checkbox-grouping": "You can group checkboxes wrapping them in an element which has to have the <code>grouped</code> class. It only works with checkboxes that has the <code>checkbox-btn</code> class.",
  "real-element": "Real element",
  "real-element-information": "As the real element is hidden, this is an example with it displayed.",
  "hidden-checkbox": "Hidden checkbox",
  "displayed-element": "Displayed element",
  "tabs": "Tabs",
  "angular-directive-css": "(AngularJS directive and CSS)",
  "tabs-introduction": "You can add tabs to show or hide different parts of your page. You have to add the <code>tabs</code> directive class to the tab container element and, in each element, a <code>data-reference</code> attribute referencing the id of the element which that tab is going to show (you can specify more than one id using spaces between them). Use the <code>selected</code> class if you want a tab to be shown by default.",
  "tabs-modifiers": "If you want to use tabs vertically, you have to add the <code>vertical</code> class to the tab container element.",
  "modals": "Modals",
  "modals-introduction": "There are three different AngularJS directives involved in the generation of modals. The main one is the <code>modal</code> directive class. The basic HTML tag structure is the following:",
  "modals-minimum-classes": "It must have an element with the <code>modal-container</code> class containing at least an element with the <code>modal-body</code> class.",
  "modals-display": "If you want to launch it, you have to use the <code>modal-launcher</code> directive class and the <code>data-reference</code> attribute with the modal id. You can place it wherever you want and it will launch the modal when you click it. For example, you can place it in a button:",
  "modals-body": "Elements with <code>modal-header</code> and <code>modal-footer</code> are optional, so you can skip them.",
  "launch-example": "Launch example",
  "modals-close": "The last directive class is <code>modal-closer</code>. You can place an element with it inside a modal to close it.",
  "selects": "Selects",
  "selects-introduction": "Selects have to be declared with <code>select</code> directive class. It hides the original select and generates an element that acts like a select. This directive is more complex than others. The select element must have <code>data-variable</code> attribute with the scope variable name that will contain the select's value inside your app controller, it also has to be declared with a <code>data-options</code> attribute, with the scope variable name of the options of the select inside your app controller. Don't declare the options inside the select, just do it in the controller. The basic syntax is an array of strings, one for each option:",
  "selects-objects": "But that syntax is not very powerful. Instead of using an array of strings, you can use JSON objects whit the following syntax:",
  "selects-objects-explained": "The only required key is <code>value</code>, the other ones are optional. If you declare the <code>text</code> key, it will display a different option text than the <code>value</code> key. If you declare the <code>translation</code> key, it will ignore both <code>text</code> and <code>value</code> keys and will draw on <code>translate</code> directive and change its text dynamically when language changes. Finally, the <code>selected</code> key, if its value is true, makes the select to take that option by default if the scope variable in <code>data-variable</code> is not set.",
  "selects-final-outcome": "So let's see an example of a select working with JSON objects and strings mixed (try changing the page language to change options' language):",
  "option": "Option",
  "dynamic-change": "Dynamic change",
  "selects-dynamic-change": "Select options can be changed dynamically by changing the options scope variable and they will update the constructed select element. Try clicking this button and see how the select changes.",
  "input-range": "Input type range",
  "range-introduction": "Inputs of type range must have the <code>range</code> directive class. This directive requires <code>min</code> and <code>max</code> HTML tag attributes and also <code>data-variable</code> attribute to work."
}