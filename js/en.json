{
  "language-selector": "language",
  "about-tab": "About larvae",
  "about-text": "Larvae is a front-end web framework for AngularJS inspired by Bootstrap. It is a side project of my other project <a href='https://github.com/oknalv/piollo' target='_blank'>piollo</a> and the purpose of doing it is to learn about AngularJS directives and also expanding my JavaScript and CSS knowledge.",
  "about-name": "I've chosen larvae as project name because, when I started it, there were a lot of moth larvae in my pantry due to a flour moth plague (<a href='https://en.wikipedia.org/wiki/Indian_mealmoth' target='_blank'><i>Plodia interpunctella</i></a>) that we had had in summer.",
  "under-construction": "(Note: both larvae and this page are likely to change because they are under construction).",
  "components-tab": "Components",
  "buttons": "Buttons",
  "button-introduction": "Buttons have to be declared with the <code>.btn</code> class.",
  "modifiers": "Modifiers",
  "button-modifiers": "There are some classes that you can add to elements with <code>.btn</code> class to change their appearance.",
  "button-modifiers-round": "One of them is the <code>.round</code> class. It makes the button corners to be more rounded.",
  "button-modifiers-icon": "Another class is <code>.icon</code>. It is designed for buttons with only an icon inside. Its width is the same than its height, it's thicker than a normal button and it has no border.",
  "button-modifiers-both": "You can use <code>.icon</code> and <code>.round</code> classes together.",
  "grouping": "Grouping",
  "button-grouping": "You can group buttons wrapping them in an element which has to have the <code>.grouped</code> class.",
  "installation": "Installation",
  "include-it": "You only have to include the CSS and JavaScript sources from the <code>/src</code> folder of the project.",
  "checkboxes": "Checkboxes",
  "checkboxes-introduction": "Checkboxes have to be declared with their <code>label</code> tag just after each one. There are three different classes:",
  "checkbox-left": "The first one is the <code>.checkbox-left</code> class. It hides the original checkbox and adds the <code>before</code> pseudo-element to the <code>label</code>, which displays a tiny box.",
  "checkbox-right": "Another class is <code>.checkbox-right</code>. It works like the previous one but displays the <code>after</code> peudo-element instead.",
  "checkbox-btn": "The last available class is <code>.checkbox-btn</code>. It doesn't use <code>label</code> tag's pseudo-elements, it changes its style to look like a button.",
  "checkbox-grouping": "You can group checkboxes wrapping them in an element which has to have the <code>.grouped</code> class. It only works with checkboxes which have the <code>.checkbox-btn</code> class.",
  "real-element": "Real element",
  "real-element-information": "As the real element is hidden, this is an example with it displayed.",
  "hidden-checkbox": "Hidden checkbox",
  "displayed-element": "Displayed element",
  "tabs": "Tabs",
  "tabs-introduction": "You can add tabs to show or hide different parts of your page. You have to add the <code>.tabs</code> directive to the tab container element and, in each element, the <code>data-lrv-tab</code> attribute referencing the id of the element which that tab is going to show (you can specify more than one id using spaces between them). Use the <code>.selected</code> class if you want a tab to be shown by default.",
  "tabs-modifiers": "If you want to use tabs vertically, you have to add the <code>.vertical</code> class to the tab container element.",
  "tabs-open-url": "Open a tab using the URL fragment",
  "tabs-open-introduction": "If you want a certain tab to be opened when loading a page, you must declare your <code>.tabs</code> element with the <code>data-lrv-link</code> attribute set to <code>true</code> and an id, and then you can use the fragment part of the url with the following syntax:",
  "tabs-open-fragment": "The pair key-value is the tab container id as key and the <code>data-lrv-tab</code> attribute value (only one tab id if there are more than one) from the tab as value. If you want more than one tab from different tab containers to be opened, just add another key-value pair separeted by an <code>&amp;</code>. For example, if you want this tab to be opened, you have to load the page with this fragment part in the URL:",
  "modals": "Modals",
  "modals-introduction": "There are three different AngularJS directives involved in the generation and use of modals. The main one is the <code>.modal</code> directive. The basic HTML tag structure is the following:",
  "modals-minimum-classes": "It must have an element with the <code>.modal-container</code> class, containing at least an element with the <code>.modal-body</code> class.",
  "modals-display": "If you want to launch it, you have to use the <code>.modal-launcher</code> directive and the <code>data-lrv-modal</code> attribute with the modal id. You can place them wherever you want and it will launch the modal when you click on it. For example, you can place it in a button:",
  "modals-body": "Elements with <code>.modal-header</code> and <code>.modal-footer</code> classes are optional, so you can skip them.",
  "launch-example": "Launch example",
  "modals-close": "The last directive is <code>.modal-closer</code>. It uses the <code>data-lrv-modal</code> attribute with the modal id too. You can put an element with this class inside a modal to close it.",
  "controller": "Controller",
  "modals-controller": "If you want to open or close a modal via JavaScript, this directive's controller has two methods: <code>open()</code>, which opens it, and <code>close()</code>, which closes it. To access the modal's controller easily, you can use the <code>lrvElement</code> service to call its <code>modal()</code> function, which returns the controller using the modal's id:",
  "selects": "Selects",
  "selects-introduction": "Selects have to be declared with <code>.select</code> directive. It hides the original select and generates an element that acts like a select. This directive is more complex than others. The select element must have the <code>data-lrv-model</code> attribute with the name of a variable in the app controller scope. This variable will contain an object with at least the <code>options</code> key with the options of the select and optionally the <code>value</code> key with one of the options' value. The basic syntax of the <code>options</code> key value is an array of strings, one for each option:",
  "selects-objects": "But that syntax is not very powerful. Instead of using an array of strings, you can use objects with the following syntax:",
  "selects-objects-explained": "The only required key is <code>value</code>, the other ones are optional. If you declare the <code>text</code> key, it will display a different option text than the <code>value</code> key. If you declare the <code>translation</code> key, it will ignore both <code>text</code> and <code>value</code> keys and will draw on the <code>.translate</code> directive and change its text dynamically when language changes.",
  "selects-final-outcome": "So let's see an example of a select working with objects and strings mixed in the options array (try changing the page language to change one of the options language):",
  "option": "Option",
  "dynamic-change": "Dynamic change of options",
  "selects-dynamic-change": "Select options can be changed dynamically by changing the options array and the constructed select element will be updated. Try clicking this button and see how the select changes.",
  "input-range": "Input type range",
  "range-introduction": "Inputs of type range must have the <code>.range</code> directive. It hides the real element and generates an element that acts like a input type range. This directive requires the <code>data-lrv-model</code> attribute to work. This attribute has to have the name of a variable from the app controller scope, which needs to be an object with the attribute <code>value</code> set to a number between the minimum and maximum values. It also accepts the <code>min</code> and <code>max</code> attributes which set the minimum and maximum values, but, if you skip them, the directive will pick them from the element's respective attributes.",
  "multilang": "Multilanguage",
  "multilang-introduction": "You can bring multilanguage support to your page very easily. First you must declare a main parent element with the <code>.translate</code> directive and with the <code>data-lrv-model</code> attribute.",
  "multilang-texts": "The <code>data-lrv-model</code> attribute must contain the name of the variable of the scope of the app controller that will contain an object with at least the <code>texts</code> key with an object with all the translations objects as value. Those objects must be identified by a language key and must have key-value pairs of text keys and translated texts:",
  "hello-world": "Hello world!!",
  "multilang-external": "You can also use external JSON files instead of putting the translations directly inside the app controller. The syntax is similar, but instead of an object as value, you must provide the JSON file path in a string:",
  "multilang-selected": "If you want a language to be selected by default, you must specify it using the <code>value</code> key and the language key.",
  "multilang-default": "There is another optional key that you can use, the <code>defaultLanguage</code> key. It tells the directive which is the key of a default language if there is no language specified in the <code>value</code> key. If it is not defined, the directive will pick the first language declared in the <code>texts</code> key. The default language is also used when a text key is missing in a language, picking the translation from the default language, so make sure that your default language has set all the text keys. In any case, if a key is missing even in the default language, the directive will use that key as text instead.",
  "texts-introduction": "After declaring the main parent element that will contain all the elements to translate, you must put, for each element that you want to give multilanguage support, the <code>.text</code> directive and a <code>data-lrv-text</code> attribute with the text key. (Note: if you create those elements dynamically, you must compile them to translate them the first time).",
  "multilang-change": "To change the language of the page, you only have to change the <code>value</code> key's value. It's up to you how to do it. In this page, I did it using a select element, that one which is in the top right corner of the page. Try changing it.",
  "saving-lang": "Saving the selected language",
  "saving-lang-introduction": "This directive makes use of the local storage API, saving automatically the page's current language when it changes in a variable named <code>lang</code> in the <code>window.localStorage</code> object, so, if you close the browser tab or even the browser, when you load the page again, it is translated to the language you had selected before.",
  "github": "View on GitHub",
  "headings": "Headings",
  "headings-introduction": "Heading HTML tags don't need any class. They look like this:",
  "tables": "Tables",
  "tables-introduction": "Tables don't need any class, just follow the HTML tag tree structure for tables. They look like this:",
  "header-bar": "Header bar",
  "header-bar-introduction": "You can use the <code>.header-bar</code> class to make an element look like a header bar. It adds padding to the element and centers vertically its elements (in the example, the element has also background color for better understanding).",
  "helpers": "Helpers",
  "helpers-introduction": "There are some classes that you can use with certain elements to change their appearance.",
  "icon-introduction": "This class makes a font icon to be a little bit bigger than the rest of the text.",
  "hidden-introduction": "This class hides an element. It's used by some directives.",
  "text-style": "Text style",
  "text-style-introduction": "This section contains information about HTML text tag's default style and also classes which change texts' style.",
  "paragraph-introduction": "This class makes the text to be justified and adds some top and bottom margin to the text. This is a comparison between elements with and without <code>.paragraph</code> class (in this example, they have a background color and a parent element with border each one for better understanding):",
  "indent-introduction": "This class adds indentation to the first line of a text. This is a comparison between elements with and without <code>.indent</code> class (in this example, they have a border for better understanding):",
  "code-introduction": "This class changes the style of the element to make its font to be monospace with some other style changes such as text color. The HTML <code>code</code> tag has the same style, but this class if for other tags to look like that. This is an example with <code>code</code> tag and <code>span</code> tag with <code>.code</code> class:",
  "radio-buttons": "Radio buttons",
  "radio-buttons-introduction": "Radio buttons have to be declared with their <code>label</code> tag just after each one. There are three different classes:",
  "radio-button-left": "The first one is the <code>.radio-left</code> class. It hides the original radio button and adds the <code>before</code> pseudo-element to the <code>label</code>, which displays a tiny circle.",
  "radio-button-right": "Another class is <code>.radio-right</code>. It works like the previous one but displays the <code>after</code> peudo-element instead.",
  "radio-button-btn": "The last available class is <code>.radio-btn</code>. It doesn't use <code>label</code> tag's pseudo-elements, it changes its style to look like a button.",
  "radio-button-grouping": "You can group radio buttons wrapping them in an element which has to have the <code>.grouped</code> class. It only works with radio buttons which have the <code>.radio-btn</code> class.",
  "hidden-radio-button": "Hidden radio button",
  "grid": "Grid",
  "grid-introduction": "The grid system depends on the CSS flexbox layout. The main class is <code>.f-row</code>. It's a container class where you have to place the flex items. By default, the elements inside has their default width. Let's see an example:",
  "grid-elements": "But it doesn't look like a grid; you need to add the element classes. There are some of them, they start with the <code>f-</code> prefix and a fraction, but instead of using the <code>/</code> character for separating the numerator from the denominator, these classes use the <code>-</code> character. The fractions must be in their simplified form. Why have I designed it that way? Because it's funnier. So, <code>.f-1-4</code> is a valid class, but <code>.f-2-4</code> not. For now, the only available denominators are 1, 2, 4 and 8, and the numerators can't be bigger or equal to their denominators, except 1. This is an example of the grid system:",
  "alignment": "Alignment",
  "grid-alignment": "If you want to align the elements horizontally or vertically, there are some modifier classes that you can add to your container element. Those classes are:",
  "grid-h-end": "<code>.h-end</code> - It makes the elements to be horizontally aligned to the right. It uses the <code>justify-content: flex-end;</code> CSS rule.",
  "grid-h-center": "<code>.h-center</code> - It makes the elements to be horizontally aligned to the center. It uses the <code>justify-content: center;</code> CSS rule.",
  "grid-h-around": "<code>.h-around</code> - It makes the elements to be horizontally equally distributed. It uses the <code>justify-content: space-around;</code> CSS rule.",
  "grid-v-end": "<code>.v-end</code> - It makes the elements to be vertically aligned to the bottom. It uses the <code>align-items: flex-end;</code> CSS rule.",
  "grid-v-center": "<code>.v-center</code> - It makes the elements to be vertically aligned to the center. It uses the <code>align-items: center;</code> CSS rule.",
  "colors-tab": "Colors",
  "colors-introduction": "The default color palette of this framework is probably not adapted to your page design. To fix this, you have the <code>lrvColor</code> factory, which helps changing the elements' colors to avoid writing CSS manually. This factory has two functions:",
  "colors-default": "The fist one is the <code>setDefaultColors</code> function, which changes the default color palette. It only has one parameter, which must be an object with the name of the classes as keys and a string or an array of strings if the class accepts more than one color as value (Note: if you want to specify colors for checkboxes/radio buttons, use <code>checkbox-radio-btn</code> and <code>checkbox-radio</code> as key instead of the class names). The color strings must be in the CSS hexadecimal format (for example, <code>#123456</code>) or <code>\"transparent\"</code> if you want it to be transparent. Each class accepts a different number of colors and they will be explained in the following sections. Use this function before the others or it won't work. This is an example of the use of this function:",
  "colors-add": "The other function is the <code>addColor</code> function. It creates modifier classes that change elements' colors. Its parameters are the class you want to change its colors, the modifier class name you are going to use and the color in a string or an array of strings if the class accepts more than one color. Each class accepts a different number of colors:",
  "colors-button": "<code>.btn</code> class supports two colors. The first one changes the border, shadows and font colors. The second one is optional and changes the background color. These are some examples:",
  "checkboxes-radios": "Checkboxes and radio buttons",
  "colors-checkbox-radio-introduction": "Checkbox and radio button classes shares the same CSS, so if you declare a color for one of their classes (for example, <code>.checkbox-btn</code>), its counterpart (<code>.radio-btn</code>) will have the same color available.",
  "checkbox-radio-buttons": "Button version",
  "colors-checkbox-radio-button": "<code>.checkbox-btn</code> and <code>.radio-btn</code> classes support two colors. The first one changes the border, shadows and font colors. The second one is optional and changes the background color. These are some examples:",
  "checkbox-radio-left-right": "Left and right version",
  "colors-checkbox-radio-left-right": "<code>.checkbox-left</code>, <code>.checkbox-right</code>, <code>.radio-left</code> and <code>.radio-right</code> classes support two colors. The first one changes the box/circle border, filling and shadow colors. The second one is optional and changes the box/circle background color. These are some examples:",
  "colors-tabs": "<code>.tabs</code> class supports two colors. The first one changes the selected tab underline color. The second one changes the color from the underline which appears when you put the mouse over a non selected tab. This is an example:",
  "colors-modals": "<code>.modal</code> class supports four colors. The first one changes the <code>.modal-header</code> and <code>.modal-footer</code> elements background color. The second one changes the closing icon font and shadow colors from the <code>.modal-header</code> element. The third one is optional and changes the <code>.modal-body</code> element background color. The last one is optional and changes the <code>.modal-footer</code> element background color if you want a different background color of the <code>.modal-header</code> element. Click the button to see an example:",
  "colors-selects": "<code>.select</code> class supports four colors. The first one changes the border, shadows and font colors. The second one changes the background color of the selected option. The third one changes the background color of the not selected options when mouse is over. The last one changes the background color of the element. This is an example:",
  "colors-range": "<code>.range</code> class supports three colors. The first one changes the border, shadows and font colors. The second one changes the bar color. The third one changes the background color of the tooltip and the circle. This is an example:",
  "colors-tables": "<code>table</code> tag supports three colors. The first one changes the header underline color. The second one changes the even rows background color. The third one changes the background color the rows when mouse is over. This is an example:",
  "messages": "Messages",
  "messages-introduction": "The <code>message</code> directive allows you to have a place where you can put some information messages, such as warning messages, error messages or success messages. You have to use its controller's function <code>add()</code> to add a message. You can get easily this directive's controller with the function <code>message()</code> from the <code>lrvElement</code> service using the directive's id as argument. The message must be an object with the <code>text</code> key and the text as value:",
  "messages-result": "And this is the result using a button to add messages:",
  "messages-translate": "If you want to bring multilanguage support for your messages, you have to use the <code>translation</code> instead of the <code>text</code> and the translation key as value:",
  "messages-close": "If you want to be able to delete your messages, you have to use the <code>close</code> key and the value set as <code>true</code>. It will appear a button inside the message to remove it:",
  "messages-time": "If you want your messages to be removed automatically after given time, you have to use the <code>time</code> key and the time you want it visible in milliseconds:"
}