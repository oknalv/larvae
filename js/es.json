{
  "language-selector": "idioma",
  "about-tab": "Acerca de larvae",
  "about-text": "Larvae es un framework CSS/Javascript para AngularJS inspirado en Bootstrap. Es un proyecto surgido de <a href='https://github.com/oknalv/piollo' target='_blank'>piollo</a>, otro de mis proyectos, con el propósito de aprender sobre las directivas de AngularJS y para ampliar mis conocimientos de CSS y JavaScript.",
  "about-name": "He elegido el nombre larvae porque, cuando comencé el proyecto, había un montón de larvas en mi despensa debido a una plaga de polillas de la harina (<a href='https://es.wikipedia.org/wiki/Plodia_interpunctella' target='_blank'><i>Plodia interpunctella</i></a>) que habíamos tenido en verano.",
  "under-construction": "(Nota: es probable que cambien tanto larvae como esta página debido a que están en construcción).",
  "components-tab": "Componentes",
  "only-css": "(Solamente CSS)",
  "buttons": "Botones",
  "button-introduction": "Los botones tienen que ser declarados con la clase <code>btn</code>.",
  "modifiers": "Modificadores",
  "button-modifiers": "Hay algunas clases que puedes añadir a los elementos con la clase <code>btn</code> para cambiar su apariencia.",
  "button-modifiers-round": "Una de ellas es la clase <code>round</code>. Hace que las esquinas de los botones sean mas redondeadas.",
  "button-modifiers-icon": "Otra clase es <code>icon</code>. Está diseñada para botones con solamente un icono dentro. Su alto y su ancho es el mismo, es más grueso que un botón normal y no tiene bordes.",
  "button-modifiers-both": "Puedes usar las clases <code>icon</code> y <code>round</code> juntas.",
  "grouping": "Agrupamiento",
  "button-grouping": "Puedes agrupar varios botones dentro en un elemento que tenga la clase <code>grouped</code>.",
  "installation": "Instalación",
  "include-it": "Solamente tienes que incluir los ficheros CSS y JavaScript de la carpeta <code>/src</code> del proyecto.",
  "checkboxes": "Checkboxes",
  "checkboxes-introduction": "Los checkboxes deben ser declarados con su etiqueta <code>label</code> justo después de cada uno. Hay tres clases diferentes:",
  "checkbox-left": "La primera es la clase <code>checkbox-left</code>. Oculta el checkbox original y añade el pseudoelemento <code>before</code> a su etiqueta <code>label</code>, que muestra una cajita.",
  "checkbox-right": "Otra clase es <code>checkbox-right</code>. Funciona igual que la anterior pero utiliza el pseudoelemento <code>after</code> en lugar del otro.",
  "checkbox-btn": "La última clase disponible es <code>checkbox-btn</code>. En lugar de utilizar los pseudoelementos de la etiqueta <code>label</code>, cambia su estilo para parecer un botón.",
  "checkbox-grouping": "Puedes agrupar varios checkboxes dentro de un elemento que tenga la clase <code>grouped</code>. Solamente funciona con checkboxes que tengan la calse <code>checkbox-btn</code>.",
  "real-element": "Elemento real",
  "real-element-information": "Como el elemento real se oculta, este es un ejemplo con él mostrado.",
  "hidden-checkbox": "Checkbox oculto",
  "displayed-element": "Checkbox mostrado",
  "tabs": "Pestañas",
  "angular-directive-css": "(Directiva de AngularJS y CSS)",
  "tabs-introduction": "Puedes añadir pestañas a tu página para mostrar u ocultar partes diferentes de ésta. Para ello tienes que añadir la directiva <code>tabs</code> al elemento contenedor de las pestañas y, en cada elemento, el atributo <code>data-lrv-tab</code> referenciando al id del elemento que esa pestaña vaya a mostrar (puedes especificar más de un id usando espacios para separarlos). Usa la clase <code>selected</code> si quieres que una pestaña se muestre por defecto.",
  "tabs-modifiers": "Si queres poner las pestañas de forma vertical, tienes que añadir la clase <code>vertical</code> al elemento contenedor de las pestañas.",
  "tabs-open-url": "Abrir una pestaña utilizando la parte del fragmento de la URL",
  "tabs-open-introduction": "Si quieres que una pestaña concreta esté abierta por defetco cuando carques una página, tienes que declarar tu elemento <code>tabs</code> con el atributo <code>data-lrv-link</code> establecido a <code>true</code> y un id, y podrás utilizar la parte del fragmento de la URL con la siguiente sintaxis:",
  "tabs-open-fragment": "El par de clave-valor is el id del contenedor de las pestañas como clave y el valor del atributo <code>data-lrv-tab</code> (utilizar solo una pestaña si hay varias) de la pestaña como valor. Si quieres que estén abiertas más de una pestaña de diferentes contenedores contenedores de pestañas, solo tienes que añadir otro par de clave-valor separándolos con un <code>&amp;</code>. Por ejemplo, para abrir la pestaña actual, el fragmento que debes utilizar es el siguiente:",
  "modals": "Modales",
  "modals-introduction": "Hay tres directivas de AngularJS relacionadas con la generación y manejo de modales. La principal es la directiva <code>modal</code>. El la estructura básica de etiquetas HTML es la siguiente:",
  "modals-minimum-classes": "El modal debe tener un elemento con la clase <code>modal-container</code>, que a su vez contendrá al menos un elemento con las clase <code>modal-body</code>.",
  "modals-display": "Para lanzar el modal, tienes que utilizar la directiva <code>modal-launcher</code> y el atributo <code>data-lrv-modal</code> con el id del modal. Puedes ponerlos en el elemento que quieras y lanzarán el modal cuando hagas click en él. Por ejemplo, puedes ponerlos dentro de un botón:",
  "modals-body": "Los elementos con las clases <code>modal-header</code> y <code>modal-footer</code> son opcionales, por lo que se puede omitir.",
  "launch-example": "Lanzar ejemplo",
  "modals-close": "La última direciva es <code>modal-closer</code>. Utiliza el atributo <code>data-lrv-modal</code> con el id del modal también. Puedes poner un elemento con esta clase dentro de un modal para cerrarlo.",
  "selects": "Selects",
  "selects-introduction": "Los selects deben ser declarados con la directiva <code>select</code>. La directiva oculta el select original y genera un elemento que hace de select. Esta directiva es más compleja que otras. El select debe tener un atributo <code>data-lrv-model</code> con el nombre del modelo que contendrá el valor del select dentro del controlador de la aplicación. Tabién tiene que ser declarado con el atributo <code>data-lrv-options</code>, con el nombre del modelo que contendrá las opciones del select dentro del controlador de tu aplicación. No declares las opciones dentro del select, hazlo en el controlador. La sintaxis básica es un array de strings, uno por cada opción:",
  "selects-objects": "Pero esta sintaxis no permite hacer muchas cosas. En lugar de usar un array de strings, puedes utilizar un array de objetos JSON con la siguiente sintaxis:",
  "selects-objects-explained": "La única clave requerida es <code>value</code>, las otras son opcionales. Si declaras la clave <code>text</code>, mostrará una opción con un texto diferente al de la clave <code>value</code>. Si declaras la clave <code>translation</code>, ignorará tanto la clave <code>value</code> y la clave <code>text</code> y hará uso de la directiva <code>translate</code> que cambiará su texto dinámicamente cuando el idioma cambie. Finalmente, la clave <code>selected</code>, si su valor es <code>true</code>, hace que el select tome esa opción por defecto si el modelo especificado en el atributo <code>data-lrv-model</code> no está establecido.",
  "selects-final-outcome": "Veamos un ejemplo de un select trabajando tanto con objetos JSON como con strings mezclados (prueba a cambiar el idioma de la página para cambiar el idioma de algunas de las opciones):",
  "option": "Opción",
  "dynamic-change": "Cambio dinámico de las opciones",
  "selects-dynamic-change": "Se pueden cambiar las opciones del select dinamicamente cambiando el modelo de las opciones, que hace que se actualize el elemento construido del select. Prueba a hacer click en este botón y observa como cambia el select.",
  "input-range": "Input de tipo range",
  "range-introduction": "Tienes que declarar los inputs de tipo rango con la directiva <code>range</code>. Esta directiva depende de los atributos <code>min</code> y <code>max</code> de la etiqueta HTML y también del atributo <code>data-lrv-model</code> para funcionar. La directiva oculta el elemento real y genera uno que hace del input de tipo range.",
  "multilang": "Multiidioma",
  "only-angular-directive": "(Solo directiva de AngularJS)",
  "multilang-introduction": "Puedes darle soporte multiidioma a tu página de manera sencilla. Primero tienes que declarar un elemento contenedor padre principal con la directiva <code>translate</code> y los atributos <code>data-lrv-texts</code>, <code>data-lrv-selected-lang</code> y <code>data-lrv-default-lang</code>.",
  "multilang-texts": "El atributo <code>data-lrv-texts</code> debe contener el nombre del modelo del controlador de la aplicación que contendrá un objeto JSON con todas las traducciones dentro de objetos JSON identificados por una clave representando el idioma, y esos objetos JSON con pares clave-valor con claves de texto y traducciones de texto:",
  "hello-world": "¡¡Hola mundo!!",
  "multilang-external": "También puedes externalizar las traducciones en archivos JSON en vez de poner directamente los objetos dentro del controlador de la aplicación. La sintaxis es similar, per en lugar de objetos JSON como valores, debes poner la ruta del archivo JSON en un string:",
  "multilang-selected": "El atributo <code>data-lrv-selected-lang</code> contiene el nombre del modelo en el controlador de la aplicación con el idioma actual.",
  "multilang-default": " El atributo <code>data-lrv-default-lang</code> es opcional, le dice a la directiva cual es el modelo del controlador que tiene la clave del idioma por defecto si no se especifica ningún idioma. Si no se define, la directiva cogerá el primer idioma declarado en el modelo del controlador especificado en el atributo <code>data-lrv-texts</code>. El idioma por defecto se utiliza también cuando la clave de un texto falta en un idioma, cogiendo la traducción del idioma por defecto, así que asegúrate que el idioma que establezcas por defecto contiene todas las claves de los textos. De todos modos, si falta una clave incluso en el idioma por defecto, la directiva utilizará en su lugar la clave como texto.",
  "texts-introduction": "Después de declarar el elemento padre principal que contendrá todos los elementos a traducir, debes poner, para cada elemento a que le quieras dar soporte multiidioma, la directiva <code>text</code> y el atributo <code>data-lrv-text</code> con la clave del texto. (Nota: si declaras dinámicamente estos elementos, debes compilarlos para que se traduzcan por primera vez).",
  "multilang-change": "Para cambiar el idioma de la página, solo tienes que cambiar el modelo declarado en el atributo <code>data-lrv-selected-lang</code>. Queda a tu elección como hacerlo. En esta página, yo lo he hecho utilizando un select, el que está en la esquina superior derecha de la página. Prueba a cambiarlo.",
  "saving-lang": "Guardar el idioma seleccionado",
  "saving-lang-introduction": "Esta directiva hace uso del API de almacenamieto local, guardando automáticamente el idioma actual de la página cuando cambia en una variable llamada <code>lang</code> dentro del objeto <code>window.localStorage</code>, así que, si cierras la pestaña del navegador o incluso el propio navegador, cuando cargues la página de nuevo, estará traducida al idioma que habías seleccionado antes.",
  "github": "Ver en GitHub"
}