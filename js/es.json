{
  "language-selector": "idioma",
  "about-tab": "Acerca de larvae",
  "about-text": "Larvae es un framework front-end para AngularJS inspirado en Bootstrap. Es un proyecto surgido de <a href='https://github.com/oknalv/piollo' target='_blank'>piollo</a>, otro de mis proyectos, con el propósito de aprender sobre las directivas de AngularJS y para ampliar mis conocimientos de CSS y JavaScript.",
  "about-name": "He elegido el nombre larvae porque, cuando comencé el proyecto, había un montón de larvas en mi despensa debido a una plaga de polillas de la harina (<a href='https://es.wikipedia.org/wiki/Plodia_interpunctella' target='_blank'><i>Plodia interpunctella</i></a>) que habíamos tenido en verano.",
  "under-construction": "(Nota: es probable que cambien tanto larvae como esta página debido a que están en construcción).",
  "components-tab": "Componentes",
  "buttons": "Botones",
  "button-introduction": "Los botones tienen que ser declarados con la clase <code>.btn</code>.",
  "modifiers": "Modificadores",
  "button-modifiers": "Hay algunas clases que puedes añadir a los elementos con la clase <code>.btn</code> para cambiar su apariencia.",
  "button-modifiers-round": "Una de ellas es la clase <code>.round</code>. Hace que las esquinas de los botones sean más redondeadas.",
  "button-modifiers-icon": "Otra clase es <code>.icon</code>. Está diseñada para botones con solamente un icono dentro. Su alto y su ancho es el mismo, es más grueso que un botón normal y no tiene bordes.",
  "button-modifiers-both": "Puedes usar las clases <code>.icon</code> y <code>.round</code> juntas.",
  "grouping": "Agrupamiento",
  "button-grouping": "Puedes agrupar varios botones dentro en un elemento que tenga la clase <code>.grouped</code>.",
  "disabled": "Desabilitado",
  "button-disabled": "Así es como se ven los botones con la clase <code>.btn</code> cuando tienen el atributo <code>disabled</code>:",
  "installation": "Instalación",
  "include-it": "Solamente tienes que incluir los ficheros CSS y JavaScript de la carpeta <code>/src</code> del proyecto.",
  "checkboxes": "Checkboxes",
  "checkboxes-introduction": "Los checkboxes deben ser declarados con su etiqueta <code>label</code> justo después de cada uno. Hay tres clases diferentes:",
  "checkbox-left": "La primera es la clase <code>.checkbox-left</code>. Oculta el checkbox original y añade el pseudoelemento <code>before</code> a su etiqueta <code>label</code>, que muestra una cajita.",
  "checkbox-right": "Otra clase es <code>.checkbox-right</code>. Funciona igual que la anterior pero utiliza el pseudoelemento <code>after</code> en lugar del otro.",
  "checkbox-btn": "La última clase disponible es <code>.checkbox-btn</code>. En lugar de utilizar los pseudoelementos de la etiqueta <code>label</code>, cambia su estilo para parecer un botón.",
  "checkbox-grouping": "Puedes agrupar varios checkboxes dentro de un elemento que tenga la clase <code>.grouped</code>. Solamente funciona con checkboxes que tengan la clase <code>.checkbox-btn</code>.",
  "real-element": "Elemento real",
  "real-element-information": "Como el elemento real se oculta, este es un ejemplo con él visible.",
  "hidden-checkbox": "Checkbox oculto",
  "displayed-element": "Checkbox visible",
  "tabs": "Pestañas",
  "tabs-introduction": "Puedes añadir pestañas a tu página para mostrar u ocultar partes diferentes de ésta. Para ello, tienes que añadir la directiva <code>.tabs</code> al elemento contenedor de las pestañas y, en cada elemento, el atributo <code>data-lrv-tab</code> referenciando al id del elemento que esa pestaña vaya a mostrar (puedes especificar más de un id usando espacios para separarlos). Usa la clase <code>.selected</code> si quieres que una pestaña se muestre por defecto.",
  "tabs-modifiers": "Si queres poner las pestañas de forma vertical, tienes que añadir la clase <code>.vertical</code> al elemento contenedor de las pestañas.",
  "tabs-open-url": "Abrir una pestaña utilizando la parte del fragmento de la URL",
  "tabs-open-introduction": "Si quieres que una pestaña concreta esté abierta por defetco cuando carques una página, tienes que declarar tu elemento <code>.tabs</code> con el atributo <code>data-lrv-link</code> establecido a <code>true</code> y un id, y podrás utilizar la parte del fragmento de la URL con la siguiente sintaxis:",
  "tabs-open-fragment": "El par de clave-valor está formado por el id del contenedor de las pestañas como clave y el valor del atributo <code>data-lrv-tab</code> (utilizar solo un id de pestaña si hay más de uno) de la pestaña como valor. Si quieres que estén abiertas más de una pestaña de diferentes contenedores contenedores de pestañas, solo tienes que añadir otro par de clave-valor separándolos con un <code>&amp;</code>. Por ejemplo, para abrir la pestaña actual, el fragmento que debes utilizar es el siguiente:",
  "modals": "Modales",
  "modals-introduction": "Hay tres directivas de AngularJS relacionadas con la generación y manejo de modales. La principal es la directiva <code>.modal</code>. El la estructura básica de etiquetas HTML es la siguiente:",
  "modals-minimum-classes": "El modal debe tener un elemento con la clase <code>.modal-container</code>, que a su vez contendrá al menos un elemento con las clase <code>.modal-body</code>.",
  "modals-display": "Para lanzar el modal, tienes que utilizar la directiva <code>.modal-launcher</code> y el atributo <code>data-lrv-modal</code> con el id del modal. Puedes ponerlos en el elemento que quieras y lanzarán el modal cuando hagas click en él. Por ejemplo, puedes ponerlo dentro de un botón:",
  "modals-body": "Los elementos con las clases <code>.modal-header</code> y <code>modal-footer</code> son opcionales, por lo que se puede omitir.",
  "launch-example": "Lanzar ejemplo",
  "modals-closer": "La última direciva es <code>.modal-closer</code>. Utiliza el atributo <code>data-lrv-modal</code> con el id del modal también. Puedes poner un elemento con esta clase dentro de un modal para cerrarlo.",
  "controller": "Controlador",
  "modals-controller": "Para obtener el controlador de un modal tienes que utilizar la función <code>modal()</code> del servicio <code>lrvElement</code> usando el id del modal.",
  "controller-methods": "El controlador de esta directiva tiene los siguientes métodos:",
  "modals-open": "Este método abre el modal.",
  "modals-close": "Este método cierra el modal.",
  "modals-onopen": "Este método establece una función que se llamará después de que se abra el modal.",
  "modals-onclose": "Este método establece una función que se llamará después de que se cierre el modal.",
  "parameters": "Parámetros",
  "function-be-called": "La función a ser llamada.",
  "usage": "Uso",
  "selects": "Selects",
  "selects-introduction": "Los selects deben ser declarados con la directiva <code>.select</code>. La directiva oculta el select original y genera un elemento que hace de select. Esta directiva es más compleja que otras. El select debe tener el atributo <code>data-lrv-model</code> con el nombre de una variable dentro del scope del controlador de la aplicación. Esta variable contendrá un objeto con al menos la clave <code>options</code> con las opciones del select y opcionalmente la clave <code>value</code> con el valor de una de las opciones. La sintaxis básica del valor de la clave <code>options</code> es un array de strings, uno por cada opción:",
  "selects-objects": "Pero esta sintaxis no permite hacer muchas cosas. En lugar de usar un array de strings, puedes utilizar un array de objetos con la siguiente sintaxis:",
  "selects-objects-explained": "La única clave requerida es <code>value</code>, las otras son opcionales. Si declaras la clave <code>text</code>, mostrará una opción con un texto diferente al de la clave <code>value</code>. Si declaras la clave <code>translation</code>, ignorará tanto la clave <code>value</code> y la clave <code>text</code> y hará uso de la directiva <code>.translate</code> que cambiará su texto dinámicamente cuando el idioma cambie.",
  "selects-final-outcome": "Veamos un ejemplo de un select trabajando tanto con objetos como con strings mezclados en el array de opciones (prueba a cambiar el idioma de la página para cambiar el idioma de algunas de las opciones):",
  "option": "Opción",
  "dynamic-change": "Cambio dinámico de las opciones",
  "selects-dynamic-change": "Se pueden cambiar las opciones del select dinamicamente cambiando el array de opciones, que hace que se actualize el elemento construido del select. Prueba a hacer click en este botón y observa como cambia el select.",
  "input-range": "Input de tipo range",
  "range-introduction": "Tienes que declarar los inputs de tipo rango con la directiva <code>.range</code>. La directiva oculta el elemento real y genera uno que hace del input de tipo range. Esta directiva depende del atributo <code>data-lrv-model</code> para funcionar. Este atributo tiene que tener el nombre de una variable del scope del controlador de la aplicación, la cual necesita ser un objeto con el atributo <code>value</code> establecido a un valor entre el mínimo y el máximo. También acepta los atributos <code>min</code> y <code>max</code> para establecer los valores máximo y mínimo, pero, si los omites, la directiva los toma directamente de los respectivos atributos del elemento.",
  "multilang": "Multiidioma",
  "multilang-introduction": "Puedes darle soporte multiidioma a tu página de manera sencilla. Primero tienes que declarar un elemento contenedor padre principal con la directiva <code>.translate</code> y el atributo <code>data-lrv-model</code>.",
  "multilang-texts": "El atributo <code>data-lrv-model</code> debe contener el nombre de la variable del scope del controlador de la aplicación que contendrá un objeto con al menos la clave <code>texts</code> con un objeto con todas los objectos con las traducciones como valor. Estos objetos deben estar identificados por una clave representando el idioma y deben tener pares clave-valor de claves de texto y traducciones de texto:",
  "hello-world": "¡¡Hola mundo!!",
  "multilang-external": "También puedes externalizar las traducciones en archivos JSON en vez de poner directamente los objetos dentro del controlador de la aplicación. La sintaxis es similar, pero en lugar de objetos como valores, debes poner la ruta del archivo JSON en un string:",
  "multilang-selected": "Si quieres que un idioma esté seleccionado por defecto, debes especificarlo utilizando la clave <code>value</code> y la clave del idioma.",
  "multilang-default": "Hay otra clave opcional que puedes utilizar, la clave <code>defaultLanguage</code>. Le dice a la directiva cual es la clave del idioma por defecto si no se especifica ningún idioma en la clave <code>value</code>. Si no se define, la directiva tomará el primer idioma declarado en la clave <code>texts</code>. El idioma por defecto se utiliza también cuando la clave de un texto falta en un idioma, cogiendo la traducción del idioma por defecto, así que asegúrate que el idioma que establezcas por defecto contiene todas las claves de los textos. De todos modos, si falta una clave incluso en el idioma por defecto, la directiva utilizará en su lugar la clave como texto.",
  "texts-introduction": "Después de declarar el elemento padre principal que contendrá todos los elementos a traducir, debes poner, para cada elemento a que le quieras dar soporte multiidioma, la directiva <code>.text</code> y el atributo <code>data-lrv-text</code> con la clave del texto. (Nota: si declaras dinámicamente estos elementos, debes compilarlos para que se traduzcan por primera vez).",
  "multilang-change": "Para cambiar el idioma de la página, solo tienes que cambiar el valor de la clave <code>value</code>. Queda a tu elección como hacerlo. En esta página, yo lo he hecho utilizando un select, el que está en la esquina superior derecha de la página. Prueba a cambiarlo.",
  "saving-lang": "Guardar el idioma seleccionado",
  "saving-lang-introduction": "Esta directiva hace uso del API de almacenamieto local, guardando automáticamente el idioma actual de la página cuando cambia en una variable llamada <code>lang</code> dentro del objeto <code>window.localStorage</code>, así que, si cierras la pestaña del navegador o incluso el propio navegador, cuando cargues la página de nuevo, estará traducida al idioma que habías seleccionado antes.",
  "github": "Ver en GitHub",
  "beadings": "Cabeceras",
  "headings-introduction": "Las etiquetas HTML de cabeceras no necesitan ninguna clase. Se muestran así:",
  "tables": "Tablas",
  "tables-introduction": "Las tablas no necesitan ninguna clase, simplemente tienes que seguir la estructura de etiquetas HTML para las tablas. Se muestran así:",
  "header-bar": "Barra de cabecera",
  "header-bar-introduction": "Puedes utilizar la clase <code>.header-bar</code> para hacer que un elemento sea como una barra de cabecera. Añade padding al elemento y centra verticalmente sus elementos (en este ejemplo, el elemento también tiene color de fondo para que se entienda mejor).",
  "helpers": "Clases auxiliares",
  "helpers-introduction": "Hay algunas clases que puedes utilizar con ciertos elementos para cambiar su apariencia.",
  "icon-introduction": "Esta clase hace que la fuente del icono sea algo más grande que el resto del texto.",
  "hidden-introduction": "Esta clase oculta un elemento. Es utilizada por varias directivas.",
  "text-style": "Estilo del texto",
  "text-style-introduction": "Esta sección contiene información acerca de estilos por defecto para etiquetas HTML y clases que cambian el estilo de los textos",
  "paragraph-introduction": "Esta clase hace que el texto esté justificado y añade márgenes encima y debajo del texto. Esta es una comparación entre elementos con y sin la clase <code>.paragraph</code> (en este ejemplo, tienen un color de fondo y un elemento padre con borde cada uno para que se entienda mejor):",
  "indent-introduction": "Esta clase añade sangría al texto. Esta es una comparación entre elementos con y sin la clase <code>.indent</code> (en este ejemplo, tienen borde para que se entienda mejor):",
  "code-introduction": "Esta clase cambia el estilo del elemento para utilizar una fuente monoespaciada y en negrita. La etiqueta HTML <code>code</code> tiene el mismo estilo, pero esta clase es para que otras etiquetas se vean igual. Este es un ejemplo con la etiqueta <code>code</code> y la etiqueta <code>span</code> con la clase <code>.code</code>:",
  "radio-buttons": "Radio buttons",
  "radio-buttons-introduction": "Los radio buttons deben ser declarados con su etiqueta <code>label</code> justo después de cada uno. Hay tres clases diferentes:",
  "radio-button-left": "La primera es la clase <code>.radio-left</code>. Oculta el radio button original y añade el pseudoelemento <code>before</code> a su etiqueta <code>label</code>, que muestra una cajita.",
  "radio-button-right": "Otra clase es <code>.radio-right</code>. Funciona igual que la anterior pero utiliza el pseudoelemento <code>after</code> en lugar del otro.",
  "radio-button-btn": "La última clase disponible es <code>.radio-btn</code>. En lugar de utilizar los pseudoelementos de la etiqueta <code>label</code>, cambia su estilo para parecer un botón.",
  "radio-button-grouping": "Puedes agrupar varios radio buttons dentro de un elemento que tenga la clase <code>.grouped</code>. Solamente funciona con radio buttons que tengan la clase <code>.checkbox-btn</code>.",
  "hidden-radio-button": "Radio button oculto",
  "grid": "Rejilla",
  "grid-introduction": "El sistema de rejilla depende de las cajas flexibles de CSS. La clase principal es <code>.f-row</code>. Es una clase contenedora donde tienes que meter los elementos flexibles. Por defecto, los elementos mantienen su ancho dentro del contenedor. Veamos un ejemplo:",
  "grid-elements": "Pero esto no se parece a una rejilla; tienes que añadir las clases para los elementos. Hay unas cuantas, empiezan con el prefijo <code>f-</code> y una fracción, pero en lugar de utilizar el carácter <code>/</code> para separar el numerador del denominador, estas clases utilizan el carácter <code>-</code>. Las fracciones deben estar simplificadas. ¿Por qué hacerlo así? Porque me parece más divertido. Entonces, <code>.f-1-4</code> es una clase válida, pero <code>.f-2-4</code> no. Por ahora, los únicos denomiadores disponibles son 1, 2, 4 y 8, y los numeradores no pueden ser mayores o iguales que los denominadores, a excepción del 1. Este es un ejemplo del sistema de rejillas:",
  "alignment": "Alineamiento",
  "grid-alignment": "Si quieres alinear los elementos vertical u horizontalmente, hay algunas clases modificadoras que puedes añadir a tu elemento contenedor. Estas clases son:",
  "grid-h-end": "<code>.h-end</code> - Hace que los elementos se alineen horizontalmente hacia la derecha. Utiliza la regla CSS <code>justify-content: flex-end;</code>.",
  "grid-h-center": "<code>.h-center</code> - Hace que los elementos se alineen horizontalmente hacia el centro. Utiliza la regla CSS <code>justify-content: center;</code>.",
  "grid-h-around": "<code>.h-around</code> -  Hace que los elementos se distribuyan equitativamente en el eje horizontal. Utiliza la regla CSS <code>justify-content: space-around;</code>.",
  "grid-v-end": "<code>.v-end</code> - Hace que los elementos se alineen verticalmente hacia abajo. Utiliza la regla CSS <code>align-items: flex-end;</code> CSS rule.",
  "grid-v-center": "<code>.v-center</code> -  Hace que los elementos se alineen verticalmente hacia el centro. Utiliza la regla CSS <code>align-items: center;</code>.",
  "messages": "Mensajes",
  "messages-introduction": "La directiva <code>.message</code> te permiten tener un lugar donde puedes poner mensajes informativos, como mensajes de alerta, mensajes de error o mensajes de éxito. Tienes que utilizar la función <code>add()</code> del controlador para añadir un mensaje. Puedes obtener fácilmente el controlador de esta directiva con la función <code>message()</code> del servicio <code>lrvElement</code> con el id de la directiva como parámetro. El mensaje debe ser un objeto con la clave <code>text</code> y el texto como valor:",
  "messages-result": "Y este es el resultado usando un botón para añadir mensajes:",
  "messages-translate": "Si quieres darle soporte multiidioma a tus mensajes, en lugar de utilizar la clave <code>text</code>, utiliza la clave <code>translation</code> y la clave de la traducción como valor:",
  "messages-close": "Si quieres poder cerrar los mensajes, tienes que utilizar la clave <code>close</code> establecida a <code>true</code>. Aparecerá un botón en el mensaje para eliminarlo:",
  "messages-time": "Si quieres que los mensajes se borren automáticamente después de un tiempo determinado, tienes que utilizar la clave <code>time</code> y el tiempo que quieres tenerlo visible en milisegundos:",
  "messages-conclusion": "Para que los mensajes sean más útiles, es mejor utilizar la factoría <code>lrvColor</code> para darles colores diferentes dependiendo del tipo de mensaje que quieras mostrar. Échale un vistazo a la sección de colores para los detalles de como utilizarla.",
  "messages-controller": "Esta sección tiene todos los métodos del controlador de los mensajes, incluyendo a los mencionados en la sección anterior.",
  "messages-add": "Este método añade un mensaje.",
  "message-parameter": "El objeto mensaje que va a ser añadido.",
  "messages-clear": "Este método limpia los mensajes dentro de la directiva.",
  "colors-tab": "Colores",
  "colors-introduction": "La paleta de colores por defecto de este framework probablemente no se adapte al diseño de tu página. Para solucionar esto, tienes la factoría <code>lrvColor</code>, que ayuda a cambiar el color de los elementos para evitar escribir CSS manualmente. Esta factoría tiene dos funciones:",
  "colors-default": "La primera es la función <code>setDefaultColors</code>, que cambia la paleta de colores por defecto. Tiene solamente un parámetro, y debe ser un objeto con los nombres de las clases como clave y un string o un array de strings si la clase acepta más de un color como valor (Nota: si quieres especificar colores para los checkboxes/radio buttons, usa <code>checkbox-radio-btn</code> y <code>chekcbox-radio</code> como clave en lugar de los nombres de las clases). Los strings de los colores deben estar en el formato hexadecimal de CSS (por ejemplo, <code>#123456</code>) o <code>\"transparent\"</code> si quieres que sea transparente. Cada clase acepta un número diferente de colores, los cuales serán explicados en las siguientes secciones. Usa esta función antes que las otras o si no no funcionará. Este es un ejemplo del uso de esta función:",
  "colors-add": "La otra función es la función <code>addColor</code>. Crea clases modificadoras que cambian los colores de los elementos. Sus parámetros son la clase a la que le quieres cambiar los colores, la clase modificadora que vas a utilizar y el color en un string o en un array de strings si la clase acepta más de un color. Cada clase acepta un número diferente de colores:",
  "colors-button": "La clase <code>.btn</code> requiere cuatro colores. El primero cambia el color del borde, las sombras y la fuente. El segundo cambia el color de fondo. El tercero cambia el color del borde y la fuente cuando el botón está deshabilitado. El último cambia el color de fondo cuando el botón está deshabilitado. Estos son algunos ejemplos:",
  "checkboxes-radios": "Checkboxes y radio buttons",
  "colors-checkbox-radio-introduction": "Las clases de los checkboxes y los radio buttons comparten el mismo CSS, así que si declaras un color para una de sus clases (por ejemplo, <code>.checkbox-btn</code>), su contraparte (<code>.radio-btn</code>) tendrá disponible el mismo color.",
  "checkbox-radio-buttons": "Versión del botón",
  "colors-checkbox-radio-button": "Las clases <code>.checkbox-btn</code> y <code>.radio-btn</code> requieren dos colores. El primero cambia el color del borde, las sombras y la fuente. El segundo cambia el color de fondo. Estos son algunos ejemplos:",
  "checkbox-radio-left-right": "Versión con caja/círculo a la derecha y a la izquierda",
  "colors-checkbox-radio-left-right": "Las clases <code>.checkbox-left</code>, <code>.checkbox-right</code>, <code>.radio-left</code> y <code>.radio-right</code> requieren dos colores. El primero cambia el color del borde, relleno y sombra de la caja o el círculo. El segundo cambia el color de fonde de la caja o el círculo. Estos son algunos ejemplos:",
  "colors-tabs": "La directiva <code>.tabs</code> requiere dos colores. El primero cambia el color del subrayado de la etiqueta seleccionada. El segundo cambia el color del subrayado de las etiquetas que no están seleccionadas cuando pasas el puntero por encima. Este es un ejemplo:",
  "colors-modals": "La directiva <code>.modal</code> requiere cuatro colores. El primero cambia el color de fondo de los elementos <code>.modal-header</code> y <code>.modal-footer</code>. El segundo cambia el color de la funete y las sombras del icono de cerrar del elemento <code>.modal-header</code>. El tercero cambia el color de fondo del elemento <code>.modal-body</code>. El último cambia el color de fondo del elemento <code>.modal-footer</code>. Haz click en el botón para ver un ejemplo:",
  "colors-selects": "La directiva <code>.select</code> requiere cuatro colores. El primero cambia el color del borde, las sombras y la fuente. El segundo cambia el color de fondo de la opción seleccionada. El tercero cambia el color de fondo de las opciones no seleccionadas cuando pasas el puntero por encima. El último cambia el color de fondo del elemento. Este es un ejemplo:",
  "colors-range": "La directiva <code>.range</code> requiere tres colores.  El primero cambia el color del borde, las sombras y la fuente. El segundo cambia el color de la barra. El tercero cambia el color del tooltip y del círculo. Este es un ejemplo:",
  "colors-tables": "La etiqueta <code>table</code> requiere tres colores. El primero cambia el color del subrayado de la cabecera. El segundo cambia el color de fondo de las filas pares. El tercero cambia el color de fondo de las filas cuando pasas el puntero por encima. Este es un ejemplo:",
  "colors-messages": "La directiva <code>.message</code> requiere dos colores. El primero cambia el color de fondo. El segundo cambia el color del texto y del icono y las sombras del botón de borrar. Pero en lugar de poner la clase modificadora dentro del elemento de la directiva, tienes que ponerla en el atributo <code>classes</code> del objeto mensaje que le vas a pasar a la función <code>add()</code> del controlador de la directiva. Este es un ejemplo con mensajes diferentes:"
}